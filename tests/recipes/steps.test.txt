import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { sql } from 'drizzle-orm';
import { recipes, recipe_steps } from '../../src/db/schema/recipes';

let authCookie: string;
const testEmail = `stepsUser${Date.now()}@test.com`;

beforeAll(async () => {
  // clean tables
  await global.dbClient.run(sql`DELETE FROM recipe_steps`);
  // await global.dbClient.run(sql`DELETE FROM recipes`);
  // await global.dbClient.run(sql`DELETE FROM "user"`);

  // seed a recipe and steps
  await global.dbClient.insert(recipes).values([
    {
      id: 'r1',
      created_by: null,
      name: 'Test Recipe',
      description: 'Desc',
      coffee_weight: 10,
      water_weight: 20,
      water_temperature: 90,
      grind_size: 'medium',
      brew_time: 60,
    },
  ]);
  await global.dbClient.insert(recipe_steps).values([
    {
      id: 's1',
      recipe_id: 'r1',
      step_order: 1,
      duration_sec: 30,
      command_parameter: 0,
      command_type: 'move',
    },
    {
      id: 's2',
      recipe_id: 'r1',
      step_order: 2,
      duration_sec: 45,
      command_parameter: 0,
      command_type: 'wait',
    },
  ]);
  // 2) Register test user
  const signUpRes = await global.app.inject({
    method: 'POST',
    url: '/api/v1/auth/sign-up/email',
    payload: {
      email: testEmail,
      password: 'password123',
      name: 'Test User',
    },
  });
  if (signUpRes.statusCode !== 200) {
    throw new Error(`Sign-up failed: ${signUpRes.statusCode}`);
  }

  // 3) Login to get auth cookie
  const signInRes = await global.app.inject({
    method: 'POST',
    url: '/api/v1/auth/sign-in/email',
    payload: { email: testEmail, password: 'password123' },
  });
  if (signInRes.statusCode !== 200) {
    throw new Error(`Sign-in failed: ${signInRes.statusCode}`);
  }
  const header = signInRes.headers['set-cookie'];
  authCookie = Array.isArray(header) ? header[0] : header;
});

afterAll(async () => {
  await global.sqliteDb.prepare('DELETE FROM "recipe_steps"').run();
});
// await global.dbClient.run(sql`DELETE FROM recipes`);
// global.sqliteDb.close();

describe('Recipe Steps API (integration)', () => {
  it('GET /recipes/:id/steps → array of steps', async () => {
    const res = await global.app.inject({
      method: 'GET',
      url: '/api/v1/recipes/r1/steps',
    });
    expect(res.statusCode).toBe(200);
    console.log(res.payload);
    expect(JSON.parse(res.payload)).toEqual([
      {
        id: 's1',
        step_order: 1,
        recipe_id: 'r1',
        duration_sec: 30,
        command_parameter: 0,
        command_type: 'move',
      },
      {
        id: 's2',
        step_order: 2,
        recipe_id: 'r1',
        duration_sec: 45,
        command_parameter: 0,
        command_type: 'wait',
      },
    ]);
  });

  it('GET /recipes/steps/:id → single step', async () => {
    const res = await global.app.inject({
      method: 'GET',
      url: '/api/v1/recipes/steps/s1',
    });
    expect(res.statusCode).toBe(200);
    expect(JSON.parse(res.payload)).toEqual({
      id: 's1',
      recipe_id: 'r1',
      step_order: 1,
      duration_sec: 30,
      command_parameter: 0,
      command_type: 'move',
    });
  });

  it('POST /recipes/steps creates a step', async () => {
    const payload = {
      recipe_id: 'r1',
      step_order: 3,
      duration_sec: 60,
      command_parameter: 0,
      command_type: 'pour',
    };
    const res = await global.app.inject({
      method: 'POST',
      url: '/api/v1/recipes/steps',
      payload: {
        recipe_id: 'r1',
        step_order: 3,
        duration_sec: 60,
        command_parameter: 0,
        command_type: 'pour',
      },
      headers: { cookie: authCookie },
    });
    expect(res.statusCode).toBe(201);
    // const body = JSON.parse(res.payload);
    // expect(body).toMatchObject({
    //   step_order: 3,
    //   duration_sec: 60,
    //   command_parameter: 0,
    //   command_type: 'pour',
    // });
    // expect(typeof body.id).toBe('string');
  });
});
